<?xml version="1.0"?>
<launch>
  
<!--
Consolidated launch file that includes nodes related to Odom Correction, Move Base and Navigation Correction
-->

  <arg name="simulation" default="false"/>
  <arg name="rate" default="10" />

  
  <!--
  ========================================================================================================
  1. Start vva_odom_correction
  ========================================================================================================
  Make periodic restarts of the odometry when the vehicle is stopped, to have the "odom" frame closer to
  the base and hence reduce the drift and the error when the vehicle rotates. Besides reduces CPU usage of
  icp_odometry after each restart.
  -->
  <node unless="$(arg simulation)" pkg="vva_lidar_odom" type="vva_odom_correction.py" name="vva_odom_correction" output="log" >
    <!-- In -->
    <remap from="vva_angular_vel_left_wheel_enc"  to="/vva_angular_vel_left_front_wheel_enc"/>
    <remap from="vva_angular_vel_right_wheel_enc" to="/vva_angular_vel_right_front_wheel_enc"/>
    <remap from="move_base/status"               to="/move_base/status"/>
    
    <!-- Out -->
    <remap from="initialpose"                     to="/initialpose"/>
    <remap from="vva_odom_correction/status"      to="/vva_odom_correction/status"/>
    
    <param name="rate"                            value="$(arg rate)"/>  <!-- Execution rate of the node (Hz) -->
    <param name="reset_odom_service_name"         value="/reset_odom"/>  <!-- Service to call to reset odometry -->

    <param name="reset_odom_period_idle"          value="10"/>  <!-- Time between periodic odometry-resets when the vehicle is stopped (Seconds) -->
    <param name="reset_odom_period_moving"        value="3"/>   <!-- Time waited to reset the odometry just after the vehicle stops (Seconds) -->
    <param name="busy_time_before_odom_reset"     value="2"/>   <!-- Time before reset_odom_period_idle expires to start publishing busy status (Seconds) -->
    <param name="map_frame"                       value="map"/>
    <param name="base_frame"                      value="base_footprint"/>
    
  </node>  


  <!--
  ========================================================================================================
  2. Start move_base
  ========================================================================================================
  -->
  <node pkg="move_base" type="move_base" respawn="false" name="move_base" output="screen">
    <rosparam file="$(find vva_navigation)/config/costmap_common_params.yaml" command="load" ns="global_costmap" />
    <rosparam file="$(find vva_navigation)/config/costmap_common_params.yaml" command="load" ns="local_costmap" />
    <rosparam file="$(find vva_navigation)/config/local_costmap_params.yaml" command="load" />
    <rosparam file="$(find vva_navigation)/config/global_costmap_params.yaml" command="load" />
    <rosparam file="$(find vva_navigation)/config/base_local_planner_params.yaml" command="load" />
    <rosparam file="$(find vva_navigation)/config/move_base_params.yaml" command="load" />
    <rosparam file="$(find vva_navigation)/config/global_planner_params.yaml" command="load" />
    
    <!-- In -->
    <remap if="$(arg simulation)"     from="odom" to="odom"/>
    <remap unless="$(arg simulation)" from="odom" to="/scanmatch_odom"/>
    <remap from="scan" to="/rplidar_scan"/>
    
    <!-- Out -->
    <remap from="cmd_vel" to="cmd_vel"/>
  </node>


  <!--
  ========================================================================================================
  3. Start vva_image_camera_info_sync     (COMMENTED, TO CHECK IF IT IS REQUIRED BECAUSE THE Kinect IS DIRECTLY CONNECTED TO THE J-Nano)
  ========================================================================================================
  Synchronize depth images and camera info at reception for vva_cliff_detector and laserscan_kinect
  -->
<!--
	<node name="vva_image_camera_info_sync" pkg="vva_topics_sync" type="vva_image_camera_info_sync.py" output="log">
      <param if="$(arg simulation)"     name="input_image_topic"        type="string" value="/camera/depth/image_raw"/>
      <param if="$(arg simulation)"     name="input_camera_info_topic"  type="string" value="/camera/depth/camera_info"/>
      <param unless="$(arg simulation)" name="input_image_topic"        type="string" value="/camera/depth_registered/sw_registered/image_rect_raw"/>
      <param unless="$(arg simulation)" name="input_camera_info_topic"  type="string" value="/camera/depth_registered/sw_registered/camera_info"/>
      
      <param name="output_image_topic"       type="string" value="/synchronized/image"/>
      <param name="output_camera_info_topic" type="string" value="/synchronized/camera_info"/>
	</node>
-->


  <!--
  ========================================================================================================
  4. Start vva_cliff_detector
  ========================================================================================================
  Mark holes and cliffs in the costmap
  -->
  <node unless="$(arg simulation)" name="vva_cliff_detector" pkg="vva_cliff_detector" type="vva_cliff_detector" output="log">
      <!-- In -->
<!--
	  	<remap from="image"       to="/synchronized/image"/>
	  	<remap from="camera_info" to="/synchronized/camera_info"/>
-->
	  	<remap from="image"       to="/camera/depth_registered/sw_registered/image_rect_raw"/>
	  	<remap from="camera_info" to="/camera/depth_registered/sw_registered/camera_info"/>
      
      <!-- Out -->
      <remap from="cliff_detector/depth" to="/downstairs_detector/depth/image"/>
      <remap from="cliff_detector/points" to="/downstairs_detector/points"/>
      
      <rosparam command="load" file="$(find vva_cliff_detector)/config/cliff_detector_params.yaml"/>
	</node>


  <!--
  ========================================================================================================
  5. Start laserscan_kinect
  ========================================================================================================
  Convert depth image from the Kinect to laser-scan to detect small obstacles
  -->
	<node name="laserscan_kinect" pkg="laserscan_kinect" type	="laserscan_kinect" output="screen">
      <!-- In -->
<!--
      <remap from="image"       to="/synchronized/image"/>
      <remap from="camera_info" to="/synchronized/camera_info"/>
-->
      <remap unless="$(arg simulation)" from="image"       to="/camera/depth_registered/sw_registered/image_rect_raw"/>
      <remap unless="$(arg simulation)" from="camera_info" to="/camera/depth_registered/sw_registered/camera_info"/>
      <remap if="$(arg simulation)"     from="image"       to="/camera/depth/image_raw"/>
      <remap if="$(arg simulation)"     from="camera_info" to="/camera/depth/camera_info"/>
      
      <!-- Out -->
	  	<remap from="scan" to="kinect_scan"/>
      
      <rosparam if="$(arg simulation)"     command="load" file="$(find vva_cliff_detector)/config/laserscan_kinect_params_simulation.yaml"/>
      <rosparam unless="$(arg simulation)" command="load" file="$(find vva_cliff_detector)/config/laserscan_kinect_params.yaml"/>
	</node>
  

  <!--
  ========================================================================================================
  6. Start laserscan_kinect_filter (scan_to_scan_filter_chain)    (COMMENTED, TO CHECK IF IT IS REALLY REQUIRED)
  ========================================================================================================
  Filter one part of the laser-scan published by the laserscan_kinect, because it has too much noise
  -->
<!--
  <group ns="vva_lidar_filter">

    <node pkg="laser_filters" type="scan_to_scan_filter_chain" name="laserscan_kinect_filter" output="log" >
      <rosparam command="load" file="$(find vva_lidar_filter)/config/laserscan_filter_params.yaml" />
-->
      <!-- In -->
<!--
      <remap from="scan" to="/kinect_scan" />
-->
      <!-- Out -->
<!--
      <remap from="scan_filtered" to="kinect_scan" />
    </node>

  </group>
-->
  
  
  <!--
  ========================================================================================================
  7. Start vva_navigation_correction
  ========================================================================================================
  Intermediate module between a goal client and move_base, in charge of implementing improvement actions when
  a goal fails. For example, put an intermediate closer goal which is in the same path of the original goal
  to unstuck the robot
  -->
  <node pkg="vva_navigation" type="vva_navigation_correction.py" name="vva_navigation_correction" output="screen" >
    <!-- In -->
    <remap from="vva_navigation_simple/goal"   to="/vva_navigation_simple/goal"/>
    <remap from="move_base/GlobalPlanner/plan" to="/move_base/GlobalPlanner/plan"/>
    <remap from="vva_odom_correction/status" to="/vva_odom_correction/status"/>
    
    <!-- Out -->
    <remap from="vva_navigation_correction/status"  to="/vva_navigation_correction/status"/>
    
    <param name="rate"                   value="$(arg rate)"/>  <!-- Execution rate of the node (Hz) -->
    <param name="closer_goal_path_poses" value="20"/>  <!-- Distance from the base to the new intermediate goal, measured in number of poses
                                                            of the global path. Approx. distance = closer_goal_path_poses * 0.025m -->
    <param name="clear_costmaps_service_name" value="/move_base/clear_costmaps"/>  <!-- Service to call to clear move_base costmaps -->
    
    <param if="$(arg simulation)"     name="using_hw_rplidar" value="false"/>
    <param unless="$(arg simulation)" name="using_hw_rplidar" value="true"/>  <!-- Indicate if a hardware RP-Lidar is used to be able to
                                                                                   call the stop/start lidar service -->
                                                                                   
    <param name="stop_lidar_service_name"     value="/stop_motor"/>  <!-- Service to call to stop the motor of RPLidar -->
    <param name="start_lidar_service_name"    value="/start_motor"/>  <!-- Service to call to start the motor of RPLidar -->
    <param name="rplidar_idle_time"          value="15"/>  <!-- Time before stopping the RPLidar's motor when in idle state -->
    
    <param if="$(arg simulation)"     name="use_odom_correction_status" value="false"/>
    <param unless="$(arg simulation)" name="use_odom_correction_status" value="true"/>  <!-- If set to true, vva_navigation_correction will
                                                                                             wait for vva_odom_correction node to finish the
                                                                                             odometry restart procedures before sending the
                                                                                             goal to move_base -->
  </node>  

</launch>


